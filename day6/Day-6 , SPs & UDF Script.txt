-----------Stored Procedures & UDFS-----------------------
create or replace schema procedures;

/*procedure is nothing but a set of sql statements or programming styled
logics encapsulated together to perform set of actions with less effort*/

--procedure for simply returning a message----
CREATE OR REPLACE PROCEDURE output_message(message varchar)
RETURNS varchar
LANGUAGE SQL
AS
BEGIN
  RETURN message;
END;
;
---call procedure---
call output_message('Ritika');
select output_message(1) from dual;

---procedure for calculating/comparing and returning a result--------
CREATE OR REPLACE PROCEDURE return_greater(number_1 INTEGER, number_2 INTEGER)
RETURNS INTEGER NOT NULL
LANGUAGE SQL
AS
BEGIN
  IF (number_1 > number_2) THEN
    RETURN number_1;
  ELSE
    RETURN number_2;
  END IF;
END;

call return_greater(1,3);

/* if we use an argument in a sql statement we put colon before the variable
and returning the result in table format*/
create table invoices(id number(10,0), price number(10,0));
insert into invoices values(1,23.30);
insert into invoices values(2,34.23);
insert into invoices values(1,60);
select * from invoices;

CREATE OR REPLACE PROCEDURE find_invoice_by_id(id array)
RETURNS TABLE (id INTEGER, price NUMBER(12,2))
LANGUAGE SQL
AS
DECLARE
  res RESULTSET DEFAULT (SELECT * FROM invoices WHERE id in (:id));
BEGIN
  RETURN TABLE(res);
END;

call find_invoice_by_id([1,2]);

/* procedure executing simple sql statements, if there are no return statements 
then null is returned*/
CREATE OR REPLACE PROCEDURE create_tables()
returns varchar
LANGUAGE SQL
as
begin
create or replace table demo.procedures.tab1(id number(10,0), name varchar(100));
insert into demo.procedures.tab1 values(1,'Ritika');
end;

call create_tables();
select * from demo.procedures.tab1;

--drop procedure---
drop procedure output_message(varchar);
drop procedure output_message(integer);

describe output_message(integer);

---UDFs-------
/* user defined functions are just like any other functions
which are used to mandatorily return a value.

difference between procedures and functions are that procedures may or may not
return any value, and functions have to return a value. Also procedures cannot 
be called from sql statements but functions can be called in between sql statements*/

/*
Although the body of a UDF can contain a complete SELECT statement, it cannot contain DDL statements or any DML statement other than SELECT.*/
 
CREATE or replace FUNCTION area_of_circle(radius FLOAT)
  RETURNS FLOAT
  AS
  $$
   select pi() * radius * radius 
  $$
  ;

call area_of_circle(2);  
select area_of_circle(2);

--note: in functions, don't put any semicolon
CREATE or replace FUNCTION get_x_year2(val integer)
returns date
as
$$
SELECT DATEADD(year, val, current_date)
$$
;

select get_x_year2(-4);

select 
case when current_date()>get_x_year1(5) then 'True' else 'False' end as compare
from dual;

call get_x_year1(-5);
select get_x_year1(-5);
drop function get_x_year1(integer);

